from . import HPC_topo
import networkx as nx

class GDBG_topo(HPC_topo.HPC_topo):
    def __init__(self, num_vertices, degree):
        self.nx_graph = nx.DiGraph()
        self.diameter = None

        assert(num_vertices > degree)
        # Create a list of edges
        edges = []    
        for v in range(num_vertices):
            for e in range(degree):
                if v != (degree*v+e)%num_vertices: #exclude self-loop arcs
                    edges.extend([(v, (degree*v+e)%num_vertices)])
        self.nx_graph.add_edges_from(edges)

    def distribute_flow_on_paths(self, path_dict):
        link_loads = {}
        for u, v in list(self.nx_graph.edges()):
            link_loads[(u, v)]=0
        for paths in path_dict.values():
            k = float(len(paths))
            for path in paths:
                for i in range(len(path) - 1):
                    u, v = path[i], path[i + 1]
                    link_loads[(u, v)] += 1 / k
        return link_loads
